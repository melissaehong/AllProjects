source djangoEnv/bin/activate in django venv folder
django-admin startproject '' in file you want to start project
cd ''
mkdir apps
cd apps
touch __init__.py
python ../manage.py startapp "what you wantl"

settings.py
'apps.nameofapp',

urls.py
from django.conf.urls import url, include # Notice we added include
urlpatterns = [
    url(r'^', include('apps.first_app.urls', namespace='anyname'))
]

urls.py
from django.conf.urls import url
from . import views           # This line is new!
OR from views import index

urlpatterns = [
  url(r'^$', views.index)     # This line has changed!
  OR url(r'^$', index, name='index')
]

views.py
from django.shortcuts import render
 def index(request):
   return render(request, 'appname/index.html')

index.html
<h1>Test</h1>

python manage.py runserver

models.py
class User(models.Model):
first_name = models.CharField(max_length=255)
last_name = models.CharField(max_length=255)
password = models.CharField(max_length=255)
created_at = models.DateTimeField(auto_now_add=True)
updated_at = models.DateTimeField(auto_now=True)

class Languages(models.Model):
ForeignKey = one to many
ManytoManyField
users = models.ManytoManyField(User)

python manage.py makemigrations
python manage.py migrate

index.html
{% load staticfiles %}
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Login Registration</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
  </head>
  <body>
    {% if messages %}
    <ul class="messages">
        {% for message in messages %}
        <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
        {% endfor %}
    </ul>
    {% endif %}
    <h2>Register</h2>
    <form action="{% url 'users:register' %}" method='post'>
      {% csrf_token %}
      First Name <input type="text" name="first_name">
      Last Name <input type="text" name="last_name">
      Email <input type="email" name="email">
      Password <input type="password" name="password">
      Confirm Password <input type="password" name="confirm_pw">
      <input type="submit" value="Register">
    </form>
    <h2>Login</h2>
    <form action="{% url 'users:login' %}" method='post'>
      {% csrf_token %}
      Email <input type="email" name="email">
      Password <input type="password" name="password">
      <input type="submit" value="Login">
    </form>
  </body>
</html>

python manage.py runserver

named routes
urls.py
urlpatterns = [
url(r'^$', views.index, name='index'),
url(r'^register$', views.register, name='register'),
url(r'^login$', views.login, name='login')
]

views.py
add the methods

refresh

views.py
from .models import User, Language
OR from ..login_reg_app.models import User
  if request.method == 'POST':
      User.objects.register(first_name=request.POST['first_name'], last_name=request.POST['last_name'], password=request.POST['password'], confirm_password=request.POST['confirm_password'])

models.py
class UserManager(models.Manager):
  def register(self, **kwargs):
    print kwargs

class User(models.Model):
  objects = UserManager()

run migrations

validations
models.py
class UserManager(models.Manager):
  def register(self, **kwargs):
    errors = False
    kwargs['password']
    if not errors:
      User.objects.create(first_name=kwargs['first_name'], etc..but NOT confirm_password..)
    return True

views.py
from django.urls import reverse
from .models import User, Language
OR from ..login_reg_app.models import User

def register(request):
  if request.method == 'POST':
      result = User.objects.register(first_name=request.POST['first_name'], last_name=request.POST['last_name'], password=request.POST['password'], confirm_password=request.POST['confirm_password'])
  return redirect(reverse('index'))

refresh

validations
models.py
class UserManager(models.Manager):
  def register(self, **kwargs):
    errors = False
    error_list = []
    if len(kwargs['first_name']) is 0:
      error_list.append('First name is required')
      errors = True
    if not kwargs['first_name'].isalpha():
      error_list.append('First name must be letters')
      errors = True
    if not errors:
      user = User.objects.create(first_name=kwargs['first_name'], etc..but NOT confirm_password..)
      return (True, user.id)
    else:
      return (False, error_list)

views.py
from django.shortcuts import render, redirect
from django.urls import reverse
OR from django.core.urlresolvers import reverse
from django.contrib import messages
from .models import User, Language
OR from ..login_reg_app.models import User

def register(request):
  if request.method == 'POST':
      result = User.objects.register(first_name=request.POST['first_name'], last_name=request.POST['last_name'], password=request.POST['password'], confirm_password=request.POST['confirm_password'])
      if result[0]:
          request.session['user_id'] = result[1]
          return redirect (reverse('dashboard'))
      else:
          request.session['errors'] = result[1]
          return redirect(reverse('index'))

Too much detail ---
def show(request):
  User.objects.show_method(id=1)

models.py
def show_method(self, id):
  User.objects.get(id=id)

password bcrypt

dashboard adding
views.py
def dashboard(request):
  all_users = User.objects.all()
  context = {
    'all_users': all_users
  }
  return render(request, 'user_languages/dashboard.html', context)

urls.py
url(r'^dashboard$', views.dashboard, name='dashboard')

dashboard.html
<h1>User Dashboard</h1>
{% for user in all_users %}
{{user.first_name}}
{% endfor %}

user has no attribute get item
return (True, user['id'])
USE DOT NOTATION (user.id)

login help
views.py
def login(request):
  if request.method == "POST":
    result = User.objects.lgoin(email=request.POST['email'], password = request.POST['password'])
    print result

    if result[0]:
      request.session['user_id'] = result[1].id
      return redirect(reverse['dashboard'])
    else:
      request.session['errors'] = result[1]
      return redirect(reverse('index'))

models.py
  class UserManager(models.Manager):
    def login(self, **kwargs):
      email = kwargs['email']
      pw = kwargs['password']
      error_list = []
      if not kwargs['email']:
        error_list.append('Email is required')
      if not email_regex.match(kwargs['email']):
        error_list.append("Email must be valid!")
      if len(kwargs['password']) < 8:
      if not len(error_list):
        try:
          user = User.objects.get(email=email)
          input_pw = pw.encode()
          hashed_pw = user.password.encode()
          print bcrypt.hashpw(input_pw, hashed_pw)
          if bcrypt.hashpw(input_pw, hashed_pw) == hashed_pw:
            return (True, user)
        except:
          error_list.append('No user with matching username and password')
          return (False, error_list)

easier models.py
class UserManager(models.Manager):
  def register(self, **kwargs):
    error_list = []
    if len(kwargs['first_name']) is 0:
      error_list.append("First name is required")
    if not kwargs['first_name'].isalpha():
      error_list.append("First name is required and can only contain letters")
    if not kwargs['email']:
      error_list.append('Email is required')
    if not email_regex.match(kwargs['email']):
      error_list.append("Email must be valid!")
    if len(kwargs['password']) < 8:
      error_list.append('Password must be a t least 8 characters in length')
    if not kwargs['password'] == kwargs['c_password']:
      error_list.append('Passwords must match!')

    if len(error_list) is 0:
      pw_hash = bcrypt.hashpw(kwargs['password']).encode(), bcrypt.gensalt())
      user = self.create(first_name=kwargs['first_name'], last_name=kwargs['last_name'], email=kwargs['email'], password=pw_hash)
      return (True, user.id)
    else:
      print error_list
      return error_list
